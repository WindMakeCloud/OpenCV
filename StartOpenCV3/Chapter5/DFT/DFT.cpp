// 使用dft()函数对图像进行DFT，画出频域图
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>

using namespace cv;

int main()
{
	// 1.以灰度模式读取原始图像并显示
	Mat srcImage = imread("1.jpg", 0);
	if (!srcImage.data)
	{
		printf("读取图片错误，请确定目录下是否有读取指定图片！\n");
		return -1;
	}
	imshow("原始图像", srcImage);

	// 2.将输入图像扩到最佳尺寸，边界用0补充
	int m = getOptimalDFTSize(srcImage.rows);
	int n = getOptimalDFTSize(srcImage.cols);
	// 将添加的像素初始化为0
	Mat padded;
	copyMakeBorder(srcImage, padded, 0, m - srcImage.rows, 0, n - srcImage.cols, BORDER_CONSTANT, Scalar::all(0));

	// 3.为DFT的结果（实部和虚部）分配空间
	// 将planes数组组合合并成一个多通道数组complexI
	Mat planes[] = { Mat_<float>(padded), Mat::zeros(padded.size(), CV_32F) };
	Mat complexI;
	merge(planes, 2, complexI);

	// 4.进行就地DFT
	dft(complexI, complexI);

	// 5.将复数转换为幅值，即=>log(1+sqrt(Re(DFT(I))^2 + Im(DFT(I))^2))
	split(complexI, planes);   // 将多通道数组分解成几个单通道数组 planes[0] = Re(DFT(I)), planes[1] = Im(DFT(I))
	magnitude(planes[0], planes[1], planes[0]);  // plane[0] = magnitude
	Mat magnitudeImage = planes[0];

	// 6.进行对数尺度缩放
	magnitudeImage += Scalar::all(1);
	log(magnitudeImage, magnitudeImage);  // 求自然对数

	// 7.剪切和重分布幅度图象限
	// 若有奇数行或列，进行频谱裁剪
	magnitudeImage = magnitudeImage(Rect(0, 0, magnitudeImage.cols & -2, magnitudeImage.rows & -2));
	// 重新排列DFT图像中的象限，使得原点位于图像中心
	int cx = magnitudeImage.cols / 2;
	int cy = magnitudeImage.rows / 2;
	Mat q0(magnitudeImage, Rect(0, 0, cx, cy));   // ROI区域的左上
	Mat q1(magnitudeImage, Rect(cx, 0, cx, cy));  // ROI区域的右上
	Mat q2(magnitudeImage, Rect(0, cy, cx, cy));  // ROI区域的左下
	Mat q3(magnitudeImage, Rect(cx, cy, cx, cy)); // ROI区域的右下
	// 交换象限（左上换右下）
	Mat temp;
	q0.copyTo(temp);
	q3.copyTo(q0);
	temp.copyTo(q3);
	// 交换象限（右上换左下）
	q1.copyTo(temp);
	q2.copyTo(q1);
	temp.copyTo(q2);

	// 8.归一化，用0到1之间的浮点值将矩阵变换为可视的图像格式
	normalize(magnitudeImage, magnitudeImage, 0, 1, NORM_MINMAX);

	// 9.显示效果图
	imshow("频谱幅值", magnitudeImage);

	waitKey(0);
	return 0;
}